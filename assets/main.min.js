'use strict';

var toPolygonArray = [];
var fromPolygonArray = [];
var page = 1;
var numPages = 3;

// get points of the paths using regex
var getCoordinates = function getCoordinates(path) {
  return path.getAttribute('d').match(/M(-?[0-9][0-9\.]*),(-?[0-9][0-9\.]*)L(-?[0-9][0-9\.]*),(-?[0-9][0-9\.]*)L(-?[0-9][0-9\.]*),(-?[0-9][0-9\.]*)Z/);
};

var createPathObjects = function createPathObjects(paths) {
  var pathsArray = [];

  paths.forEach(function (path, i) {
    var coordinates = getCoordinates(path);

    pathsArray.push({
      fill: path.getAttribute('fill'),
      opacity: path.getAttribute('fill-opacity'),
      one: coordinates[1],
      two: coordinates[2],
      three: coordinates[3],
      four: coordinates[4],
      five: coordinates[5],
      six: coordinates[6]
    });
  });

  return pathsArray;
};

var animatePolygons = function animatePolygons(duration) {
  var paths = document.querySelector('#svg-holder').querySelectorAll('path');

  fromPolygonArray = createPathObjects(paths);

  fromPolygonArray.forEach(function (obj, i) {
    TweenMax.to(obj, duration, {
      one: toPolygonArray[i].one,
      two: toPolygonArray[i].two,
      three: toPolygonArray[i].three,
      four: toPolygonArray[i].four,
      five: toPolygonArray[i].five,
      six: toPolygonArray[i].six,
      ease: Power3.easeOut,
      onUpdate: function onUpdate() {
        paths[i].setAttribute("d", 'M' + obj.one + ',' + obj.two + 'L' + obj.three + ',' + obj.four + 'L' + obj.five + ',' + obj.six + 'Z');
      }
    });
  });

  // animate color
  paths.forEach(function (path, i) {
    var toColor = toPolygonArray[i].fill;
    var toOpacity = toPolygonArray[i].opacity;

    TweenLite.to(path, duration, {
      opacity: toOpacity,
      fill: toColor,
      ease: Power3.easeOut
    });
  });
};

// add points attribute values to arrays
var updatePolygonArrays = function updatePolygonArrays(nextSvgId, duration) {
  var paths = document.getElementById(nextSvgId).querySelectorAll('path');

  toPolygonArray = createPathObjects(paths);
  animatePolygons(duration);
  fromPolygonArray = toPolygonArray;
};

window.onload = function () {
  initialiseSvg();
};

var initialiseSvg = function initialiseSvg() {
  var paths = document.querySelector('#svg-holder').querySelectorAll('path');

  paths.forEach(function (path, i) {
    path.setAttribute('fill', '');
    path.setAttribute('fill-opacity', '');
  });

  updatePolygonArrays('svg-1', 0);
};
'use strict';

var nextPage = function nextPage() {
  event.preventDefault();

  //
  if (page !== numPages) {
    page++;
    updatePolygonArrays('svg-' + page, 1);
    updateStory(page);
  }
};

var prevPage = function prevPage() {
  event.preventDefault();

  if (page !== 1) {
    page--;
    updatePolygonArrays('svg-' + page, 1);
    updateStory(page);
  }
};
"use strict";
'use strict';

var updateStory = function updateStory(page) {
    var stories = document.querySelectorAll('.story');
    stories.forEach(function (story, i) {
        story.classList.add('hidden');
    });

    document.querySelector('#story-' + page).classList.remove('hidden');
};