"use strict";

// Get all the modals
var modals = document.querySelectorAll('.modal');

// Hide a modal
var hideModal = function hideModal(modal) {
    modal.classList.add("modal-hiding");

    // Delay "display: none" to allow animation to finish
    setTimeout(function () {
        modal.classList.remove("modal-hiding");
        modal.classList.add("modal-hidden");
    }, 250);
};

// Setup event listeners
modals.forEach(function (modal, i) {
    var btn = document.querySelector('#btn-' + modal.id);
    var btnConcise = document.querySelector('#btn-concise-' + modal.id);
    var close = document.querySelector('#close-' + modal.id);

    // Open modal
    btn.onclick = function (event) {
        event.preventDefault();
        modal.classList.remove("modal-hidden");
        modal.scrollTop = 0;
    };
    btnConcise.onclick = function (event) {
        event.preventDefault();
        modal.classList.remove("modal-hidden");
        modal.scrollTop = 0;
    };

    // Close modal
    close.onclick = function () {
        hideModal(modal);
    };
});

// Close modal by clicking outside it
window.onmousedown = function (event) {
    if (event.target.closest('.modal') != null) {
        hideModal(event.target);
    }
};
'use strict';

var numPages = document.querySelectorAll('.story').length;

// Update the part of the story being shown
var updateStory = function updateStory(page) {
    var stories = document.querySelectorAll('.story');

    stories.forEach(function (story, i) {
        story.classList.add('hidden');
    });

    document.querySelector('#story-' + page).classList.remove('hidden');
};

// Update the progress bar
var updateProgress = function updateProgress(page) {
    var progress = document.querySelector('#progress');

    var value = page / (numPages - 1) * 100;

    progress.style.width = value + '%';
};

// Update the navigation buttons
var updateNavigation = function updateNavigation(page) {
    var navigations = document.querySelectorAll('.navigation');

    navigations.forEach(function (navigation, i) {
        navigation.classList.add('hidden');
    });
    if (page != 0) {
        document.querySelector('#navigation-' + page).classList.remove('hidden');
    }
};

// Load/unload the concise version of the story
var loadConcise = function loadConcise(load) {
    var concise = document.querySelector('#concise');

    if (load) {
        concise.classList.remove("hidden");
    } else {
        concise.classList.add("hiding");

        // Delay "z-index" to allow opacity fade to finish
        setTimeout(function () {
            concise.classList.remove("hiding");
            concise.classList.add("hidden");
        }, 400);
    }
};

// Load the story, svg and progress for the given page
var loadPage = function loadPage(page) {
    if (page !== -1) {
        loadConcise(false);
        updatePolygonArrays(page, 1);
        updateStory(page);
        updateProgress(page);
        updateNavigation(page);
    } else {
        loadConcise(true);
    }
};

// Load the story, svg and progress for the given page
var findPage = function findPage() {
    var hash = window.location.hash.substr(1);
    var page = 0;

    if (hash.substring(0, 4) === 'page') {
        page = parseInt(hash.match(/\d+/)[0]);
        loadPage(page);
    } else if (hash === 'concise') {
        loadPage(-1);
    }
};

// Removes svg attributes that interfere so that opacity/color are not doubled
var initialiseSvg = function initialiseSvg() {
    var paths = document.querySelector('#svg-holder').querySelectorAll('path');

    paths.forEach(function (path, i) {
        path.setAttribute('fill', '');
        path.setAttribute('fill-opacity', '');
    });

    updatePolygonArrays(0, 0);
};

// Check for mobile device, from http://detectmobilebrowsers.com/
window.mobilecheck = function () {
    var check = false;
    (function (a) {
        if (/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(a) || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(a.substr(0, 4))) check = true;
    })(navigator.userAgent || navigator.vendor || window.opera);
    return check;
};

// Prevent viewing from small devices.
var checkDevice = function checkDevice() {
    var maxWidth = 950;
    var width = Math.max(document.documentElement.clientWidth, window.innerWidth || 0);

    if (width < maxWidth || !window.mobilecheck) {
        document.querySelector('#block').classList.remove("hidden");
    } else {
        document.querySelector('#block').classList.add("hidden");
    }
};

// Update events
window.onload = function () {
    initialiseSvg();
    checkDevice();
    findPage();
};

window.onhashchange = function () {
    findPage();
};

window.onresize = function () {
    checkDevice();
};

window.onkeydown = function (event) {
    var hash = window.location.hash.substr(1);
    var page = void 0;

    if (hash.substring(0, 4) === 'page') {
        page = parseInt(hash.match(/\d+/)[0]);
    } else if (hash === '') {
        page = 0;
    }

    if (event.keyCode == '37') {
        // Left arrow
        if (page > 0) {
            window.location.hash = '#page-' + (page - 1);
        }
    } else if (event.keyCode == '39') {
        // Right arrow
        if (page < numPages - 1) {
            window.location.hash = '#page-' + (page + 1);
        }
    }
};
'use strict';

var toPolygonArray = [];
var fromPolygonArray = [];

// Get points of the paths using regex
var getCoordinates = function getCoordinates(path) {
    return path.getAttribute('d').match(/M(-?[0-9][0-9\.]*),(-?[0-9][0-9\.]*)L(-?[0-9][0-9\.]*),(-?[0-9][0-9\.]*)L(-?[0-9][0-9\.]*),(-?[0-9][0-9\.]*)Z/);
};

// Go through the SVG element and create objects for each path
var createPathObjects = function createPathObjects(paths) {
    var pathsArray = [];

    paths.forEach(function (path, i) {
        var coordinates = getCoordinates(path);

        pathsArray.push({
            fill: path.getAttribute('fill'),
            opacity: path.getAttribute('fill-opacity'),
            one: coordinates[1],
            two: coordinates[2],
            three: coordinates[3],
            four: coordinates[4],
            five: coordinates[5],
            six: coordinates[6]
        });
    });

    return pathsArray;
};

// Animates each polygon from the former state to the next
var animatePolygons = function animatePolygons(duration) {
    var paths = document.querySelector('#svg-holder').querySelectorAll('path');

    fromPolygonArray = createPathObjects(paths);

    // Animate movement
    fromPolygonArray.forEach(function (obj, i) {
        TweenMax.to(obj, duration, {
            one: toPolygonArray[i].one,
            two: toPolygonArray[i].two,
            three: toPolygonArray[i].three,
            four: toPolygonArray[i].four,
            five: toPolygonArray[i].five,
            six: toPolygonArray[i].six,
            ease: Power2.easeOut,
            onUpdate: function onUpdate() {
                paths[i].setAttribute("d", 'M' + obj.one + ',' + obj.two + 'L' + obj.three + ',' + obj.four + 'L' + obj.five + ',' + obj.six + 'Z');
            }
        });
    });

    // Animate color
    paths.forEach(function (path, i) {
        var toColor = toPolygonArray[i].fill;
        var toOpacity = toPolygonArray[i].opacity;

        TweenLite.to(path, duration, {
            opacity: toOpacity,
            fill: toColor,
            ease: Power2.easeOut
        });
    });
};

// Add points attribute values to arrays
var updatePolygonArrays = function updatePolygonArrays(page, duration) {
    var paths = document.getElementById('svg-' + page).querySelectorAll('path');

    toPolygonArray = createPathObjects(paths);
    animatePolygons(duration);
    fromPolygonArray = toPolygonArray;
};