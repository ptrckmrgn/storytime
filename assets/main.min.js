"use strict";

// Get all the modals
var modals = document.querySelectorAll('.modal');

// Hide a modal
var hideModal = function hideModal(modal) {
    modal.classList.add("modal-hiding");

    // Delay "display: none" to allow animation to finish
    setTimeout(function () {
        modal.classList.remove("modal-hiding");
        modal.classList.add("modal-hidden");
    }, 250);
};

// Setup event listeners
modals.forEach(function (modal, i) {
    var btn = document.querySelector('#btn-' + modal.id);
    var btnConcise = document.querySelector('#btn-concise-' + modal.id);
    var close = document.querySelector('#close-' + modal.id);

    // Open modal
    btn.onclick = function (event) {
        event.preventDefault();
        modal.classList.remove("modal-hidden");
    };
    btnConcise.onclick = function (event) {
        event.preventDefault();
        modal.classList.remove("modal-hidden");
    };

    // Close modal
    close.onclick = function () {
        hideModal(modal);
    };
});

// Close modal by clicking outside it
window.onclick = function (event) {
    if (event.target.closest('.modal') != null) {
        hideModal(event.target);
    }
};
'use strict';

var numPages = document.querySelectorAll('.story').length;

// Update the part of the story being shown
var updateStory = function updateStory(page) {
    var stories = document.querySelectorAll('.story');

    stories.forEach(function (story, i) {
        story.classList.add('hidden');
    });

    document.querySelector('#story-' + page).classList.remove('hidden');
};

// Update the progress bar
var updateProgress = function updateProgress(page) {
    var progress = document.querySelector('#progress');

    var value = page / (numPages - 1) * 100;

    progress.style.width = value + '%';
};

// Update the navigation buttons
var updateNavigation = function updateNavigation(page) {
    var navigations = document.querySelectorAll('.navigation');

    navigations.forEach(function (navigation, i) {
        navigation.classList.add('hidden');
    });

    document.querySelector('#navigation-' + page).classList.remove('hidden');
};

// Load/unload the concise version of the story
var loadConcise = function loadConcise(load) {
    var concise = document.querySelector('#concise');

    if (load) {
        concise.classList.remove("hidden");
    } else {
        concise.classList.add("hiding");

        // Delay "z-index" to allow opacity fade to finish
        setTimeout(function () {
            concise.classList.remove("hiding");
            concise.classList.add("hidden");
        }, 400);
    }
};

// Load the story, svg and progress for the given page
var loadPage = function loadPage() {
    var hash = window.location.hash.substr(1);
    var page = 0;

    if (hash.substring(0, 4) === 'page') {
        page = hash.match(/\d+/)[0];

        loadConcise(false);
        updatePolygonArrays(page, 1);
        updateStory(page);
        updateProgress(page);
        updateNavigation(page);
    } else if (hash === 'concise') {
        loadConcise(true);
    }
};

// Removes svg attributes that interfere so that opacity/color are not doubled
var initialiseSvg = function initialiseSvg() {
    var paths = document.querySelector('#svg-holder').querySelectorAll('path');

    paths.forEach(function (path, i) {
        path.setAttribute('fill', '');
        path.setAttribute('fill-opacity', '');
    });

    updatePolygonArrays(0, 0);
};

// Prevent viewing from small devices.
var checkDevice = function checkDevice() {
    var maxWidth = 950;
    var width = Math.max(document.documentElement.clientWidth, window.innerWidth || 0);

    if (width < maxWidth) {
        document.querySelector('#block').classList.remove("hidden");
    } else {
        document.querySelector('#block').classList.add("hidden");
    }
};

// Update events
window.onload = function () {
    initialiseSvg();
    checkDevice();
    loadPage();
};

window.onhashchange = function () {
    loadPage();
};

window.onresize = function () {
    checkDevice();
};
'use strict';

var toPolygonArray = [];
var fromPolygonArray = [];

// Get points of the paths using regex
var getCoordinates = function getCoordinates(path) {
    return path.getAttribute('d').match(/M(-?[0-9][0-9\.]*),(-?[0-9][0-9\.]*)L(-?[0-9][0-9\.]*),(-?[0-9][0-9\.]*)L(-?[0-9][0-9\.]*),(-?[0-9][0-9\.]*)Z/);
};

// Go through the SVG element and create objects for each path
var createPathObjects = function createPathObjects(paths) {
    var pathsArray = [];

    paths.forEach(function (path, i) {
        var coordinates = getCoordinates(path);

        pathsArray.push({
            fill: path.getAttribute('fill'),
            opacity: path.getAttribute('fill-opacity'),
            one: coordinates[1],
            two: coordinates[2],
            three: coordinates[3],
            four: coordinates[4],
            five: coordinates[5],
            six: coordinates[6]
        });
    });

    return pathsArray;
};

// Animates each polygon from the former state to the next
var animatePolygons = function animatePolygons(duration) {
    var paths = document.querySelector('#svg-holder').querySelectorAll('path');

    fromPolygonArray = createPathObjects(paths);

    // Animate movement
    fromPolygonArray.forEach(function (obj, i) {
        TweenMax.to(obj, duration, {
            one: toPolygonArray[i].one,
            two: toPolygonArray[i].two,
            three: toPolygonArray[i].three,
            four: toPolygonArray[i].four,
            five: toPolygonArray[i].five,
            six: toPolygonArray[i].six,
            ease: Power2.easeOut,
            onUpdate: function onUpdate() {
                paths[i].setAttribute("d", 'M' + obj.one + ',' + obj.two + 'L' + obj.three + ',' + obj.four + 'L' + obj.five + ',' + obj.six + 'Z');
            }
        });
    });

    // Animate color
    paths.forEach(function (path, i) {
        var toColor = toPolygonArray[i].fill;
        var toOpacity = toPolygonArray[i].opacity;

        TweenLite.to(path, duration, {
            opacity: toOpacity,
            fill: toColor,
            ease: Power2.easeOut
        });
    });
};

// Add points attribute values to arrays
var updatePolygonArrays = function updatePolygonArrays(page, duration) {
    var paths = document.getElementById('svg-' + page).querySelectorAll('path');

    toPolygonArray = createPathObjects(paths);
    animatePolygons(duration);
    fromPolygonArray = toPolygonArray;
};